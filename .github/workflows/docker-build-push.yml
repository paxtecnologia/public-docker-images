name: Docker Build and Push

on:
  push:
    branches:
      - main

jobs:
  create-docker-changes:
    runs-on: ubuntu-latest
    outputs:
      directory: ${{ steps.find-docker-changes.outputs.dir }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find Docker Changes
        id: find-docker-changes
        run: |
          # DEBUG
          echo "1"
          echo $(git diff-tree --no-commit-id --name-only -r HEAD)
          echo "2"
          # Obter os diretórios que contêm Dockerfile
          find . -type f -name Dockerfile | grep -o '.*/' | uniq | sort | sed 's/\.\///' | rev | sed 's/\///' | rev > docker_dirs.txt
          # Obter os diretórios alterados pelo Git (após a 6ª linha)
          git diff-tree --no-commit-id --name-only -r HEAD | grep -o '.*/' | uniq | sort | rev | sed 's/\///' | rev > gitshow.txt
          # DEBUG
          cat gitshow.txt
          cat docker_dirs.txt
          # Extrair os diretórios que aparecem em ambos os arrays
          dir_dif=$(comm -12 docker_dirs.txt gitshow.txt)
          common_dirs=$(printf "${dir_dif[@]}" | jq -R . | jq -s . | tr '\n' ' ' | tr -d ' ')
          echo $common_dirs
          echo "dir=${common_dirs}" >> $GITHUB_OUTPUT

  create-build-matrix:
    needs: create-docker-changes
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.create-docker-changes.outputs.directory, '[]') }}
    strategy:
      matrix:
        directory: ${{ fromJSON(needs.create-docker-changes.outputs.directory) }}
      max-parallel: 4
    outputs:
      build-args-matrix: ${{ steps.find-build-matrix.outputs.build-args-matrix }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find Build Matrix
        id: find-build-matrix
        env:
          DIR: ${{ matrix.directory }}
        run: |
          cd ${{ env.DIR }}
          build_args_matrix_jq = $(jq '.build.args.matrix' config.json)
          build_args_matrix=$(printf "${build_args_matrix[@]}" | jq -R . | jq -s . | tr '\n' ' ' | tr -d ' ')
          echo $build_args_matrix
          echo "build-args-matrix=${build_args_matrix}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: create-build-matrix
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.create-build-matrix.outputs.build-args-matrix, '[]') }}
    strategy:
      matrix:
        build-args-matrix: ${{ fromJSON(needs.create-build-matrix.outputs.build-args-matrix) }}
      max-parallel: 4
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and push Docker images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          DIR: ${{ matrix.directory }}
          BUILD_ARGS_MATRIX: ${{ matrix.build-args-matrix }}
        run: |
          echo ${{ env.DIR }}
          echo ${{ env.BUILD_ARGS_MATRIX }}
          # cd ${{ env.DIR }}
          # IMAGE_NAME=${{ secrets.DOCKER_REGISTRY_USERNAME }}/$(jq '.image.name' config.json)
          # docker build -t $IMAGE_NAME .
          # docker push $IMAGE_NAME
