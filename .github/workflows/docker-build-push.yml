name: Docker Build and Push

on:
  push:
    branches:
      - main

jobs:
  create-docker-changes:
    runs-on: ubuntu-latest
    outputs:
      directory: ${{ steps.find-docker-changes.outputs.dir }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Find Docker Changes
        id: find-docker-changes
        run: |
          # Obter os diretórios que contêm Dockerfile
          find . -type f -name Dockerfile | grep -o '.*/' | uniq | sort | sed 's/\.\///' | rev | sed 's/\///' | rev > docker_dirs.txt
          # Obter os diretórios alterados pelo Git (após a 6ª linha)
          git show --name-only | awk 'NR>6 {print $0}' | grep -o '.*/' | uniq | sort | rev | sed 's/\///' | rev > gitshow.txt
          # Extrair os diretórios que aparecem em ambos os arrays
          dir_dif=$(comm -12 docker_dirs.txt gitshow.txt)
          common_dirs=$(printf "${dir_dif[@]}" | jq -R . | jq -s . | tr '\n' ' ' | tr -d ' ')
          echo $common_dirs
          echo "dir=${common_dirs}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: create-docker-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJSON(needs.create-docker-changes.outputs.directory) }}
      max-parallel: 4
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and push Docker images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
          DIR: ${{ matrix.directory }}
        run: |
          cd ${{ env.DIR }}
          IMAGE_NAME=${{ secrets.DOCKER_REGISTRY_USERNAME }}/$(jq '.image.name' config.json)
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
