name: Docker Build and Push

on:
  push:
    branches:
      - main

jobs:
  create-docker-changes:
    runs-on: ubuntu-latest
    outputs:
      directory: ${{ steps.find-docker-changes.outputs.dir }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Find Docker Changes
        id: find-docker-changes
        run: |
          # Obter os diretórios que contêm Dockerfile
          find . -type f -name Dockerfile | grep -o '.*/' | uniq | sort | sed 's/\.\///' | rev | sed 's/\///' | rev > docker_dirs.txt
          # Obter os diretórios alterados pelo Git (após a 6ª linha)
          git diff --name-only HEAD~1..HEAD | grep -o '.*/' | uniq | sort | rev | sed 's/\///' | rev > gitshow.txt
          # Extrair os diretórios que aparecem em ambos os arrays
          dir_dif=$(comm -12 docker_dirs.txt gitshow.txt)
          common_dirs=$(printf "${dir_dif[@]}" | jq -R . | jq -s . | jq tostring)
          echo "dir=${common_dirs}" >> $GITHUB_OUTPUT

  create-build-matrix:
    needs: create-docker-changes
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.create-docker-changes.outputs.directory, '[]') }}
    strategy:
      matrix:
        directory: ${{ fromJSON(needs.create-docker-changes.outputs.directory) }}
      max-parallel: 4
    outputs:
      build-args-matrix: ${{ steps.find-build-matrix.outputs.build-args-matrix }}
      directory: ${{ matrix.directory }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find Build Matrix
        id: find-build-matrix
        env:
          DIR: ${{ matrix.directory }}
        run: |
          cd ${{ env.DIR }}
          build_args_matrix=$(jq '.build.args.matrix' config.json | jq tostring)
          echo "build-args-matrix=${build_args_matrix}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: create-build-matrix
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.create-build-matrix.outputs.build-args-matrix, '[]') }}
    strategy:
      matrix:
        build-args-matrix: ${{ fromJSON(needs.create-build-matrix.outputs.build-args-matrix) }}
      max-parallel: 4
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and push Docker images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          DIR: ${{ needs.create-build-matrix.outputs.directory }}
        run: |
          echo "1"
          cd ${{ env.DIR }}
          echo "2"
          REPOSITORY_NAME=$(jq '.repository.name' config.json)
          echo "3"
          TAG=$(echo $BUILD_ARGS_MATRIX | jq '.TAG')
          echo "4"
          BUILD_ARG=""
          echo "5"
          GLOBAL_JSON=$(jq '.build.args.global' config.json)
          echo "6"
          for key in $(echo "${GLOBAL_JSON}" | jq -r keys[]); do
            echo "7"
            value=$(echo "${GLOBAL_JSON}" | jq -r ".${key}")
            echo "8"
            BUILD_ARG="${BUILD_ARG} --build-arg ${key}=${value}"
            echo "9"
          done
          echo "10"
          echo $BUILD_ARG
          echo "10.1"
          for key in $(echo "${{ matrix.build-args-matrix }}" | jq -r keys[]); do
            echo "11"
            value=$(echo "${{ matrix.build-args-matrix }}" | jq -r ".${key}")
            echo "2"
            BUILD_ARG="${BUILD_ARG} --build-arg ${key}=${value}"
            echo "13"
          done
          echo "14"
          echo $BUILD_ARG
          echo "14.1"
          IMAGE_NAME=${{ env.DOCKER_REGISTRY_USERNAME }}/$REPOSITORY_NAME:$TAG
          echo $IMAGE_NAME
          echo "15"
          docker build $BUILD_ARG -t $IMAGE_NAME .
          echo "16"
          docker push $IMAGE_NAME
          echo "17"
